extends ../templates/documentation.pug
block document
  h1 Getting started
  img.logo(src= fileRoot + "doc/images/logo128.png", alt="logo", title="Primrose", style="float:left;padding:10px")

  p Using Primrose to make web applications is straightforward. To start, #[a(href= fileRoot + "PrimroseQuickstart.zip") download the `Quick Start` example project]. In it, you will find files that create a basic project, showing details on how to model, setup, and run code to work with Primrose:
  ul
    li #[code app.js] - this is where you will write your JavaScript code to define your scene.
    li #[code bg.jpg] - a skymap texture.
    li #[code cardboard.mtl] - materials for cardboard.obj,
    li #[code cardboard.obj] - an icon for activating VR mode.
    li #[code deck.png] - a ground texture.
    li #[code helvetiker_regular.typeface.js] - a font for 3D text elements.
    li #[code index.html] - an HTML file to pull it all together.
    li #[code monitor.mtl] - materials for monitor.obj,
    li #[code monitor.obj] - an icon for activating regular full-screen mode.
    li #[code Primrose.min.js] - the Primrose framework.
    li #[code PrimroseDependencies.min.js] - 3rd party JS libraries like Three.js on which Primrose depends, prepackaged for you.
    li #[code PrimroseDocumentation.min.js] - the live documentation database for Primrose.
    li #[code StartHere.exe] - run this executable on Windows to setup a local web server and automatically start your browser.
    li #[code wind.ogg] - some ambient noise for aiding in orienting one's self in the space.

  p In the #[code app.js] file, you'll find the relevant scripts to edit to make your own VR applications. The template project starts out fairly empty.
  pre: code.
    grammar("JavaScript");
    var app = new Primrose.BrowserEnvironment({
        skyTexture: "bg.jpg",
        groundTexture: "deck.png"
      } );

    app.addEventListener( "ready", function () {
      // Perform any post-initialization setup. Once this event fires, the Primrose
      // framework is ready and will start animation as soon as this function returns.
    } );

    app.addEventListener( "gazecomplete", function(evt){
      // You can respond to "intended stare" events here, i.e. when the user gazes
      // at a particular object for an extended period of time. Usually, about three
      // seconds.
    } );

    app.addEventListener( "pointerend", function(evt){
      // You can respond to the user "clicking" an object here. This could be by using
      // a mouse on their desktop PC or by touching the screen while looking at an
      // object on a mobile device.
    } );

    app.addEventListener( "update", function ( dt ) {
      // Perform per-frame updates here, like moving objects around according to your
      // own rules.
    } );

  p If everything worked correctly, it should look something like this:
  img(src=fileRoot + "doc/images/gettingStarted.jpg", alt="screenshot", title="Blank scene")
